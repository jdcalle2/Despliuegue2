@@ -6,7 +6,8 @@ import { AddForm } from './components/mascota/AddForm/AddForm';
import { TableView } from './components/mascota/TableView/TableView';
import { Navbar } from './components/ui/Navbar';

export const Mascotas = () => {
export const Mascotas = () => {   

    return (
        <Provider store={ store }>
            <div className="row">
 91  
frontend/src/actions/mascota.js
@@ -1,21 +1,104 @@
import Swal from 'sweetalert2';
import { fetchManage } from '../helpers/fetch';
import { types } from '../types/types';

export const mascotaAddNew = (e) => ({
const mascotaAddView = (e) => ({
    type: types.mascotaAddNew,
    payload: e
});

export const mascotaAddNew = (e) => {
    return async ( dispatch ) => {

        try {
            const resp = await fetchManage( 'mascota', e, 'POST' );
            const body = await resp.json();

            if(body.status){
                dispatch(mascotaAddView(body.mascota));
            }else{
                Swal.fire('Error', 'Se produjo un error al cargar la mascota', 'error');
            }

        } catch (err) {
            Swal.fire('Error', 'Se produjo un error al cargar la mascota', 'error');
        }   

    }
};

const mascotaLoaded = (e) => ({
    type: types.mascotaLoaded,
    payload: e
});

export const mascotaLoadItems = () => {
    return async ( dispatch ) => {

        try{
            const resp = await fetchManage( 'mascota' );
            const body = await resp.json(); 

            if(body.status) {
                dispatch(mascotaLoaded(body.mascotas));
            }else{
                Swal.fire('Error', 'Se produjo un error al mostrar las mascotas', 'error');
            }   

        } catch (err) {
            Swal.fire('Error', 'Se produjo un error al mostrar las mascotas', 'error');
        }           
    }
}

export const mascotaSetItem = (e) => ({
    type: types.mascotaSetItem,
    payload: e
});

export const mascotaUpdateItem = (e) => ({
const mascotaUpdated = (e) => ({
    type: types.mascotaEditItem,
    payload: e
});

export const mascotaDeleteItem = (e) => ({
export const mascotaUpdateItem = (e) => {
    return async(dispatch) => {
        try{
            const resp = await fetchManage( 'mascota/'+e.id , e, 'PUT' );
            const body = await resp.json(); 

            if(body.status) {                
                dispatch(mascotaUpdated(body.mascota));
            }else{
                Swal.fire('Error', 'Se produjo un error al editar la mascota', 'error');
            }

        }catch(err){
            Swal.fire('Error', 'Se produjo un error al editar la mascota', 'error');
        }
    }
};

const mascotaDeleted = (e) => ({
    type: types.mascotaDeleteItem,
    payload: e
});
});

export const mascotaDeleteItem = (e) => {
    return async (dispatch) => {
        try {

            const resp = await fetchManage( 'mascota/'+e.id , {}, 'DELETE' );
            const body = await resp.json(); 

            if(body.status) {                
                dispatch(mascotaDeleted(e));
            }else{
                Swal.fire('Error', 'Se produjo un error al eliminar la mascota', 'error');
            }
        }catch(err){
            Swal.fire('Error', 'Se produjo un error al eliminar la mascota', 'error');
        }
    }
};

  8  
frontend/src/components/mascota/AddForm/AddForm.js
@@ -5,7 +5,6 @@ import { mascotaAddNew } from "../../../actions/mascota";
import './AddForm.css';

const initForm = {
    id: '',
    mascota: '',
    dueño: '',
    edad: ''
@@ -22,8 +21,7 @@ export const AddForm = () => {
    const handleChange = ({target}) => {
        setFormValues({
            ...formValues,
            [target.name]: target.value,
            id: Math.random() * (999999999999 - 50) + 50
            [target.name]: target.value
        });
    }

@@ -38,9 +36,7 @@ export const AddForm = () => {
            return Swal.fire('Error', 'No puedes dejar la edad de la mascota vacío', 'error');
        }

        dispatch(mascotaAddNew({
            ...formValues
        })); 
        dispatch(mascotaAddNew(formValues)); 

        setFormValues(initForm);
    }
  6  
frontend/src/components/mascota/EditForm/EditForm.js
@@ -22,7 +22,7 @@ Modal.setAppElement('#root');
const initForm = {
    mascota: '',
    dueño: '',
    edad: ''
    edad: 0
};

export const EditMascota = () => {
@@ -39,7 +39,7 @@ export const EditMascota = () => {
            setFormValues(actualMascota);
        }        
    }, [actualMascota, setFormValues]);

    
    const closeModal = () => {
        dispatch(uiCloseModal());
    }
@@ -58,7 +58,7 @@ export const EditMascota = () => {
            return Swal.fire('Error', 'No puedes dejar el nombre de la mascota vacío', 'error');
        }else if ( dueño.trim().length < 1 ) {
            return Swal.fire('Error', 'No puedes dejar el nombre del dueño vacío', 'error');
        }else if ( edad.trim().length < 1 ) {
        }else if ( edad <= 0 ) {
            return Swal.fire('Error', 'No puedes dejar la edad de la mascota vacío', 'error');
        }

 8  
frontend/src/components/mascota/TableView/TableView.js
@@ -1,17 +1,21 @@
import React from "react";
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import './TableView.css';

import { EditMascota } from "../EditForm/EditForm";
import { uiOpenModal } from "../../../actions/ui";
import { mascotaDeleteItem, mascotaSetItem } from "../../../actions/mascota";
import { mascotaDeleteItem, mascotaLoadItems, mascotaSetItem } from "../../../actions/mascota";

export const TableView = () => {

    const { mascotas } = useSelector(state =>  state.mascota);

    const dispatch = useDispatch();

    useEffect(() => {
        dispatch( mascotaLoadItems() );
    }, [dispatch]);

    const editItem = (e) => {
        dispatch(mascotaSetItem(e));
        dispatch(uiOpenModal());    
 21  
frontend/src/helpers/fetch.js
@@ -0,0 +1,21 @@
const fetchManage = ( endpoint, body, method = 'GET' ) => {
    const url = 'http://localhost:3800/' + endpoint;

    if ( method === 'GET' ) {
        return fetch( url );
    } else {
        return fetch( url, {
            method,
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify( body )
        });
    }


}

export {
    fetchManage
}
  28  
frontend/src/reducers/mascotaReducer.js
@@ -1,18 +1,19 @@
import { types } from "../types/types";

/*{
    id: 1,
    mascota: "Luis",
    dueño: "UWU",
    edad: '23'
},{
    id: 2,
    mascota: "Terry",
    dueño: "Luis",
    edad: '2'
}*/

const initialState = {
    mascotas: [{
        id: 1,
        mascota: "Luis",
        dueño: "UWU",
        edad: '23'
    },{
        id: 2,
        mascota: "Terry",
        dueño: "Luis",
        edad: '2'
    }],
    mascotas: [],
    actualMascota: null
};

@@ -38,9 +39,10 @@ export const mascotaReducer = ( state = initialState, action  ) => {
                    e => (e.id !== action.payload.id) 
                ), actualMascota: null
            }
        case types.mascotaViewItems:
        case types.mascotaLoaded:
            return {
                ...state
                ...state,
                mascotas: [ ...action.payload ]
            }
        case types.mascotaEditItem:
            return {
  2  
frontend/src/types/types.js
@@ -7,5 +7,5 @@ export const types = {
    mascotaSetItem: '[mascota] Set Item Active',
    mascotaEditItem: '[mascota] Edit Item',
    mascotaDeleteItem: '[mascota] Delte Item',
    mascotaViewItems: '[mascota] View Items'
    mascotaLoaded: '[mascota] Mascota Cargada'
}
